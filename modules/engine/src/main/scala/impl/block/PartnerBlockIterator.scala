// Copyright (c) 2016-2022 Association of Universities for Research in Astronomy, Inc. (AURA)
// For license information see LICENSE or https://opensource.org/licenses/BSD-3-Clause

package edu.gemini.tac.qengine.impl.block

import edu.gemini.tac.qengine.util.Time
import edu.gemini.tac.qengine.p1.{Observation, Proposal}

/**
 * An iterator, of sorts, which can be used to step through a single list of
 * proposals generating TimeBlock instances.  The proposals are expected to be
 * associated with a single partner (hence the name of the class), but nothing
 * enforces this.
 *
 * <p>Unless the hasNext method returns <code>true</code>, the results of
 * calling any other method are unspecified.
 */
trait PartnerBlockIterator{

  /**
   * Remaining proposals that have not yet been completely visited.
   */
  def remainingProposals: List[Proposal]

  /**
   * The proposal that will be referenced from the TimeBlock that is generated
   * by the 'next' method.
   */
  def currentProposal: Proposal = remainingProposals.head


   /**
   * Observations in the current proposal that have not been completely visited.
   */
  def remainingObservationsInActiveList: List[Observation]

  /**
   * The observation that will be referenced from the TimeBlock that is
   * generated by the 'next' method.
   */
  def currentObservation: Observation = remainingObservationsInActiveList.head

  /**
   * The amount of time in the current observation which has not be assigned
   * to any TimeBlock
   */
  def currentObservationRemainingTime: Time

  /**
   * Whether this iterator's next method will generate the first block of the
   * current proposal.
   */
  def isStartBlock: Boolean

  /**
   * Determines whether this iterator will generate a TimeBlock if the `next`
   * method is called.  No other methods should be called if this method
   * returns <code>false</code>.
   */
  def hasNext = !remainingProposals.isEmpty


  def isStartOf(prop: Proposal): Boolean =
    (currentProposal.id == prop.id) && isStartBlock

  private def nextBlock(maxTime: Time): Block = {
    val time = Time.min(currentObservationRemainingTime, maxTime)
    val isFinal = (remainingObservationsInActiveList.tail == Nil) && (time == currentObservationRemainingTime)
    Block(currentProposal, currentObservation, time, isStartBlock, isFinal)
  }

  /**
   * Generates the next TimeBlock and the next PartnerTimeBlockIterator.
   */
  def next(maxTime: Time, activeList : Proposal => List[Observation]): (Block, PartnerBlockIterator) = {
    val block = nextBlock(maxTime)
    (block, advance(block.time, activeList))
  }

  /**
   * Generates a PartnerTimeBlock iterator for the next proposal, skipping the
   * current proposal and its observations.
   */
  def skip(activeList : Proposal => List[Observation]): PartnerBlockIterator = advanceProp(activeList)

  private def advanceProp(activeList : Proposal => List[Observation]): PartnerBlockIterator = remainingProposals match {
    case _ :: nextProp :: tail =>
      mkIterator(nextProp :: tail, activeList(nextProp),
        Observation.relativeObsTime(activeList(nextProp).head, nextProp.time, activeList(nextProp)), isStartOfBlock = true)
    case _ => PartnerBlockIterator.Empty
  }

  private def advanceObs(activeList : Proposal => List[Observation]): PartnerBlockIterator = remainingObservationsInActiveList match {
    case _ :: nextObs :: tail =>
      mkIterator(remainingProposals, nextObs :: tail,
        Observation.relativeObsTime(nextObs, currentProposal.time, activeList(currentProposal)), isStartOfBlock = false)
    case _ => advanceProp(activeList)
  }

  private def advance(t: Time, activeList : Proposal => List[Observation]): PartnerBlockIterator =
    if (currentObservationRemainingTime > t)
      mkIterator(remainingProposals, remainingObservationsInActiveList, currentObservationRemainingTime - t, isStartOfBlock = false)
    else
      advanceObs(activeList)

  protected def mkIterator(propList: List[Proposal], obsList: List[Observation], time: Time, isStartOfBlock: Boolean): PartnerBlockIterator
}


/**
 * A factory for creating PartnerTimeBlockIterators.
 */
object PartnerBlockIterator {

  private object Empty extends PartnerBlockIterator {
    val remainingProposals: List[Proposal] = Nil
    val remainingObservationsInActiveList: List[Observation] = Nil
    val currentObservationRemainingTime: Time = Time.Zero
    val isStartBlock: Boolean = false

    def mkIterator(propList: List[Proposal], obsList: List[Observation], time: Time, start: Boolean): PartnerBlockIterator = this
  }

  private class NormalIterator(val remainingProposals: List[Proposal], val remainingObservationsInActiveList: List[Observation], val currentObservationRemainingTime: Time, val isStartBlock: Boolean) extends PartnerBlockIterator {
    def mkIterator(propList: List[Proposal], obsList: List[Observation], time: Time, start: Boolean): PartnerBlockIterator =
      new NormalIterator(propList, obsList, time, start)
  }

  private def init(l: List[Proposal], activeList : Proposal => List[Observation]): (List[Observation], Time) = {
    val activeProposal = l.head
    val activeObservations = activeList(activeProposal)
    val firstObservation = activeObservations.head
    (activeObservations, Observation.relativeObsTime(firstObservation, activeProposal.time, activeObservations))
  }

  private def applyNonEmpty(propList: List[Proposal], activeList : Proposal=>List[Observation]): PartnerBlockIterator =
    init(propList, activeList) match {
      case (activeObservations, time) => new NormalIterator(propList, activeObservations, time, true)
    }

  /**
   * Creates a PartnerTimeBlockIterator that uses times associated with the
   * specified category and steps through the given list of proposals.
   *
   * <p>Note, there is no input validation but it is expected that all the
   * proposals contain at least one observation.  If there are any proposals
   * without observations, expect runtime exceptions. The same is true when
   * using Band 3 times (that is, if activeList is _.band3Observations).
   * Please ensure that the proposal lists are filtered as
   * appropriate.
   */
  def apply(propList: List[Proposal], activeList : Proposal=>List[Observation]): PartnerBlockIterator =
    if (propList.isEmpty) Empty else applyNonEmpty(propList, activeList)
}
